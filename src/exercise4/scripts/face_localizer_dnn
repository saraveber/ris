#!/usr/bin/python3
import math
import sys
import rospy
import dlib
import cv2
import numpy as np
import tf2_geometry_msgs
import tf2_ros
import numpy
import message_filters
import sys


#import matplotlib.pyplot as plt
from sensor_msgs.msg import Image
from geometry_msgs.msg import PointStamped, Vector3, Pose
from cv_bridge import CvBridge, CvBridgeError
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import ColorRGBA
from sound_play.msg import SoundRequest
from sound_play.libsoundplay import SoundClient


class face_localizer:
    def __init__(self):
        rospy.init_node('face_localizer', anonymous=True)

        # An object we use for converting images between ROS format and OpenCV format
        self.bridge = CvBridge()

        # The function for performin HOG face detection
        #self.face_detector = dlib.get_frontal_face_detector()
        self.face_net = cv2.dnn.readNetFromCaffe('/home/sara/WORKSPACE/src/exercise4/scripts/deploy.prototxt.txt', '/home/sara/WORKSPACE/src/exercise4/scripts/res10_300x300_ssd_iter_140000.caffemodel')

        # A help variable for holding the dimensions of the image
        self.dims = (0, 0, 0)

        # Marker array object used for showing markers in Rviz
        self.marker_array = MarkerArray()
        #POSITIONS OF THE FACES TYPE POSE
        self.face_positions = []
        self.number_of_detections = []
        self.marker_num = 0

        # Subscribe to the image and/or depth topic
        # self.image_sub = rospy.Subscriber("/camera/rgb/image_raw", Image, self.image_callback)
        # self.depth_sub = rospy.Subscriber("/camera/depth/image_raw", Image, self.depth_callback)

        # Publiser for the visualization markers
        self.soundhandle = SoundRequest()

        self.markers_pub = rospy.Publisher('face_markers', MarkerArray, queue_size=1000)
        self.voice_pub = rospy.Publisher('robotsound',SoundRequest, queue_size = 1000)
      

        # Object we use for transforming between coordinate frames
        self.tf_buf = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buf)


    def get_pose(self,coords,dist,stamp):
        # Calculate the position of the detected face

        k_f = 554 # kinect focal length in pixels

        x1, x2, y1, y2 = coords

        face_x = self.dims[1] / 2 - (x1+x2)/2.
        face_y = self.dims[0] / 2 - (y1+y2)/2.

        angle_to_target = np.arctan2(face_x,k_f)

        # Get the angles in the base_link relative coordinate system
        x, y = dist*np.cos(angle_to_target), dist*np.sin(angle_to_target)

        ### Define a stamped message for transformation - directly in "base_link"
        #point_s = PointStamped()
        #point_s.point.x = x
        #point_s.point.y = y
        #point_s.point.z = 0.3
        #point_s.header.frame_id = "base_link"
        #point_s.header.stamp = rospy.Time(0)

        # Define a stamped message for transformation - in the "camera rgb frame"
        point_s = PointStamped()
        point_s.point.x = -y
        point_s.point.y = 0
        point_s.point.z = x
        point_s.header.frame_id = "camera_rgb_optical_frame"
        point_s.header.stamp = stamp

        # Get the point in the "map" coordinate system
        try:
            point_world = self.tf_buf.transform(point_s, "map")

            # Create a Pose object with the same position
            pose = Pose()
            pose.position.x = point_world.point.x
            pose.position.y = point_world.point.y
            pose.position.z = point_world.point.z
        except Exception as e:
            print(e)
            pose = None

        return pose
    

    def find_faces(self):
        print('I got a new image!')

        # Get the next rgb and depth images that are posted from the camera
        try:
            rgb_image_message = rospy.wait_for_message("/camera/rgb/image_raw", Image)
        except Exception as e:
            print(e)
            return 0

        try:
            depth_image_message = rospy.wait_for_message("/camera/depth/image_raw", Image)
        except Exception as e:
            print(e)
            return 0
        #ts = message_filters.TimeSynchronizer([rgb_image_message, depth_image_message], 10)
       
        # Convert the images into a OpenCV (numpy) format

        try:
            rgb_image = self.bridge.imgmsg_to_cv2(rgb_image_message, "bgr8")
        except CvBridgeError as e:
            print(e)

        try:
            depth_image = self.bridge.imgmsg_to_cv2(depth_image_message, "32FC1")
        except CvBridgeError as e:
            print(e)

        # Set the dimensions of the image
        self.dims = rgb_image.shape
        h = self.dims[0]
        w = self.dims[1]

        # Tranform image to gayscale
        #gray = cv2.cvtColor(rgb_image, cv2.COLOR_BGR2GRAY)

        # Do histogram equlization
        #img = cv2.equalizeHist(gray)

        # Detect the faces in the image
        #face_rectangles = self.face_detector(rgb_image, 0)
        blob = cv2.dnn.blobFromImage(cv2.resize(rgb_image, (300, 300)), 1.0, (300, 300), (104.0, 177.0, 123.0))
        self.face_net.setInput(blob)
        face_detections = self.face_net.forward()

        for i in range(0, face_detections.shape[2]):
            confidence = face_detections[0, 0, i, 2]
            if confidence>0.5:
                box = face_detections[0,0,i,3:7] * np.array([w,h,w,h])
                box = box.astype('int')
                x1, y1, x2, y2 = box[0], box[1], box[2], box[3]

                # Extract region containing face
                face_region = rgb_image[y1:y2, x1:x2]

                # Visualize the extracted face
                #cv2.imshow("ImWindow", face_region)
                #cv2.waitKey(1)

                # Find the distance to the detected face
                face_distance = float(np.nanmean(depth_image[y1:y2,x1:x2]))

                print('Distance to face', face_distance)

                # Get the time that the depth image was recieved
                depth_time = depth_image_message.header.stamp

                # Find the location of the detected face
                pose = self.get_pose((x1,x2,y1,y2), face_distance, depth_time)
                

                is_new = 1
                marker_id = 0
                i = 0

                for p in self.face_positions:
                    a = numpy.array((p.position.x ,p.position.y, p.position.z))
                    b = numpy.array((pose.position.x, pose.position.y, pose.position.z))
                    dist = numpy.linalg.norm(a-b)
                    if(dist < 0.5):
                        is_new = 0
                        #c = (a*self.number_of_detections[i]+b)/(self.number_of_detections[i]+1)
                        #zato da je shranjen avrage trenutno dala ven ker iscem bug
                        #self.face_positions[i].position.x = c[0]
                        #self.face_positions[i].position.y = c[1]
                        self.number_of_detections[i] = self.number_of_detections[i]+1
                        marker_id = i

                    i = i + 1

                    
                if (is_new and pose is not None and not math.isnan(face_distance)):
                    self.face_positions.append(pose)
                    self.number_of_detections.append(1)
                    marker_id = self.marker_num
                    self.marker_num = self.marker_num +1

                    #dodaj premik proti obrazu in ustavitev

                    #Posiljenaje pozdrava voice
                    self.soundhandle.sound= -3
                    self.soundhandle.command = 1
                    self.soundhandle.volume = 2.0
                    self.soundhandle.arg = "hello, how are you"
                    self.voice_pub.publish(self.soundhandle)
                

                if (pose is not None and  not math.isnan(face_distance)):
                    marker = Marker()
                    marker.header.stamp = rospy.Time(0)
                    marker.header.frame_id = 'map'
                    marker.pose = self.face_positions[marker_id];
                    marker.type = 9 
                    marker.text = str(self.number_of_detections[marker_id])
                    marker.action = 0
                    marker.frame_locked = False
                    marker.lifetime = rospy.Duration.from_sec(100)
                    marker.id = marker_id
                    marker.scale = Vector3(1, 1, 1)
                    marker.color = ColorRGBA(0,0 , 0, 1)
                    self.marker_array.markers.append(marker)
                    self.markers_pub.publish(self.marker_array)

                    if is_new:
                        print ("neeeeeeew detection!!!!!!!!!")
                    else: 
                        print (" ta obraz sem ze detektiral")
                    print(self.marker_num)
                    print (self.number_of_detections)
                    #print (self.face_positions)
                    print("marker id is" + str(marker_id))



    def depth_callback(self,data):

        try:
            depth_image = self.bridge.imgmsg_to_cv2(data, "32FC1")
        except CvBridgeError as e:
            print(e)

        # Do the necessairy conversion so we can visuzalize it in OpenCV
        
        image_1 = depth_image / np.nanmax(depth_image)
        image_1 = image_1*255
        
        image_viz = np.array(image_1, dtype=np.uint8)

        #cv2.imshow("Depth window", image_viz)
        #cv2.waitKey(1)

        #plt.imshow(depth_image)
        #plt.show()

def main():

        face_finder = face_localizer()

        rate = rospy.Rate(1)
        while not rospy.is_shutdown():
            face_finder.find_faces()
            rate.sleep()

        cv2.destroyAllWindows()


if __name__ == '__main__':
    main()
